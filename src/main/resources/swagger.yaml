openapi: 3.0.1
info:
  title: API Vertical
  description: "API para gerenciar pedidos, usuários e produtos"
  version: v1

servers:
  - url: http://localhost:8080
    description: Servidor local para desenvolvimento

tags:
  - name: Autenticação
    description: "Endpoints para login e registro de usuários"
  - name: Arquivos
    description: "Upload e processamento de arquivos"
  - name: Pedidos
    description: "Consulta de pedidos e usuários"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      description: "Detalhes do produto"
      properties:
        product_id:
          type: integer
          example: 111
        value:
          type: number
          format: decimal
          example: 512.24
      required:
        - product_id
        - value

    Order:
      type: object
      description: "Detalhes do pedido"
      properties:
        order_id:
          type: integer
          example: 123
        total:
          type: number
          format: decimal
          example: 1024.48
        date:
          type: string
          format: date
          example: "2021-12-01"
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
        - order_id
        - total
        - date
        - products

    User:
      type: object
      description: "Informações do usuário e seus pedidos"
      properties:
        user_id:
          type: integer
          example: 1
        name:
          type: string
          example: "Zarelli"
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
      required:
        - user_id
        - name
        - orders

    RegisterDTO:
      type: object
      description: "Dados para registro de um novo usuário"
      properties:
        login:
          type: string
          example: "novo_usuario"
        password:
          type: string
          format: password
          example: "senhaSegura123"
        role:
          type: string
          description: "Papel do usuário"
          enum:
            - USER
            - ADMIN
          example: "USER"
      required:
        - login
        - password
        - role

    LoginRequestDTO:
      type: object
      description: "Credenciais para login"
      properties:
        login:
          type: string
          example: "usuario_existente"
        password:
          type: string
          format: password
          example: "senhaSegura123"
      required:
        - login
        - password

    LoginResponseDTO:
      type: object
      description: "Token de autenticação após login bem-sucedido"
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsIn..."
        type:
          type: string
          example: "Bearer"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2023-10-27T10:15:30"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "O arquivo enviado é inválido."
        path:
          type: string
          example: "/files/upload"
      required:
        - timestamp
        - status
        - error
        - message
        - path

paths:
  /auth/register:
    post:
      summary: "Registra um novo usuário"
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
      responses:
        '201':
          description: "Usuário registrado com sucesso"
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      summary: "Autentica um usuário e retorna um token JWT"
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: "Login bem-sucedido"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'

  /files/upload:
    post:
      summary: "Upload de arquivo"
      tags:
        - Arquivos
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Processado com Sucesso"
        '400':
          $ref: '#/components/responses/BadRequest'

  /search/order/{orderId}:
    get:
      summary: "Buscar pedido por ID"
      tags:
        - Pedidos
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
          example: 123
      responses:
        200:
          description: "Pedido encontrado com sucesso."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: "Pedido não encontrado."

  /search/orders:
    get:
      summary: "Listar todos os pedidos"
      tags:
        - Pedidos
      responses:
        200:
          description: "Lista de pedidos retornada com sucesso."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        204:
          description: "Nenhum pedido encontrado."

  /search/orders/by-date:
    get:
      summary: "Buscar pedidos por intervalo de datas"
      tags:
        - Pedidos
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          example: "2023-01-01"
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          example: "2023-01-31"
      responses:
        200:
          description: "Lista de pedidos encontrados no intervalo especificado."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        204:
          description: "Nenhum pedido encontrado no intervalo especificado."

responses:
  BadRequest:
    description: "Requisição Inválida"
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

  Unauthorized:
    description: "Não Autorizado"
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

  InternalServerError:
    description: "Erro Interno do Servidor"
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'